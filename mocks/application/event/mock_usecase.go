// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/event/usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/application/event/usecase.go -destination=mocks/application/event/mock_usecase.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	event "github.com/qkitzero/event-service/internal/domain/event"
	gomock "go.uber.org/mock/gomock"
)

// MockEventUsecase is a mock of EventUsecase interface.
type MockEventUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockEventUsecaseMockRecorder
	isgomock struct{}
}

// MockEventUsecaseMockRecorder is the mock recorder for MockEventUsecase.
type MockEventUsecaseMockRecorder struct {
	mock *MockEventUsecase
}

// NewMockEventUsecase creates a new mock instance.
func NewMockEventUsecase(ctrl *gomock.Controller) *MockEventUsecase {
	mock := &MockEventUsecase{ctrl: ctrl}
	mock.recorder = &MockEventUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventUsecase) EXPECT() *MockEventUsecaseMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventUsecase) CreateEvent(userIDStr, titleStr, descriptionStr string, startTime, endTime time.Time) (event.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", userIDStr, titleStr, descriptionStr, startTime, endTime)
	ret0, _ := ret[0].(event.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventUsecaseMockRecorder) CreateEvent(userIDStr, titleStr, descriptionStr, startTime, endTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventUsecase)(nil).CreateEvent), userIDStr, titleStr, descriptionStr, startTime, endTime)
}

// ListEvents mocks base method.
func (m *MockEventUsecase) ListEvents(userIDStr string) ([]event.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", userIDStr)
	ret0, _ := ret[0].([]event.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockEventUsecaseMockRecorder) ListEvents(userIDStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockEventUsecase)(nil).ListEvents), userIDStr)
}
