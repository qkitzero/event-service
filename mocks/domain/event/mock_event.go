// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/event/event.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/event/event.go -destination=mocks/domain/event/mock_event.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	event "github.com/qkitzero/event-service/internal/domain/event"
	user "github.com/qkitzero/event-service/internal/domain/user"
	gomock "go.uber.org/mock/gomock"
)

// MockEvent is a mock of Event interface.
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
	isgomock struct{}
}

// MockEventMockRecorder is the mock recorder for MockEvent.
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance.
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// CreatedAt mocks base method.
func (m *MockEvent) CreatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt.
func (mr *MockEventMockRecorder) CreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockEvent)(nil).CreatedAt))
}

// Description mocks base method.
func (m *MockEvent) Description() event.Description {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(event.Description)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockEventMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockEvent)(nil).Description))
}

// EndTime mocks base method.
func (m *MockEvent) EndTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// EndTime indicates an expected call of EndTime.
func (mr *MockEventMockRecorder) EndTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndTime", reflect.TypeOf((*MockEvent)(nil).EndTime))
}

// ID mocks base method.
func (m *MockEvent) ID() event.EventID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(event.EventID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockEventMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockEvent)(nil).ID))
}

// StartTime mocks base method.
func (m *MockEvent) StartTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// StartTime indicates an expected call of StartTime.
func (mr *MockEventMockRecorder) StartTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTime", reflect.TypeOf((*MockEvent)(nil).StartTime))
}

// Title mocks base method.
func (m *MockEvent) Title() event.Title {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Title")
	ret0, _ := ret[0].(event.Title)
	return ret0
}

// Title indicates an expected call of Title.
func (mr *MockEventMockRecorder) Title() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Title", reflect.TypeOf((*MockEvent)(nil).Title))
}

// Update mocks base method.
func (m *MockEvent) Update(title event.Title, description event.Description, startTime, endTime time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", title, description, startTime, endTime)
}

// Update indicates an expected call of Update.
func (mr *MockEventMockRecorder) Update(title, description, startTime, endTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEvent)(nil).Update), title, description, startTime, endTime)
}

// UpdateAt mocks base method.
func (m *MockEvent) UpdateAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// UpdateAt indicates an expected call of UpdateAt.
func (mr *MockEventMockRecorder) UpdateAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAt", reflect.TypeOf((*MockEvent)(nil).UpdateAt))
}

// UserID mocks base method.
func (m *MockEvent) UserID() user.UserID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserID")
	ret0, _ := ret[0].(user.UserID)
	return ret0
}

// UserID indicates an expected call of UserID.
func (mr *MockEventMockRecorder) UserID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserID", reflect.TypeOf((*MockEvent)(nil).UserID))
}
